// Generated by CoffeeScript 1.12.7
(function() {
  $(function() {
    var clearFragment, color, colors, disableDownload, enableDownload, figure, fractal, onSizeChanged, square;
    colors = {
      n: [0, 0, 0],
      w: [255, 255, 255],
      r: [255, 100, 100],
      g: [100, 255, 100],
      b: [100, 100, 255],
      y: [255, 255, 50]
    };
    color = 'w';
    square = 0;
    figure = [];
    fractal = new Fractal('#fractal', null, [0, 0, 0, 1]);
    window.fractal = fractal;
    onSizeChanged = function(size) {
      var pixelCount, pixels;
      square = Number(size);
      $('.js_pixels').attr('data-size', square).empty();
      $('.js_size_val').text(square);
      pixelCount = Math.pow(square, 2);
      pixels = [];
      figure = figure.slice(0, pixelCount);
      _.forEach(_.range(pixelCount), function(index) {
        var pixel, pixelInput;
        if (!figure[index]) {
          figure[index] = colors['n'];
        }
        pixelInput = $('<input>').attr('type', 'checkbox').attr('checked', figure[index].join(',') !== colors['n'].join(',')).data('index', index).addClass('pixel__input js_pixel');
        pixel = $('<label></label>').addClass('pixel js_pixel_wrap').css('background-color', "rgb(" + (figure[index].join(',')) + ")").append(pixelInput);
        return pixels.push(pixel);
      });
      return $('.js_pixels').append(pixels);
    };
    clearFragment = function() {
      _.forEach(figure, function(item, index) {
        return figure[index] = colors['n'];
      });
      return onSizeChanged(square);
    };
    disableDownload = function() {
      return $('.js_download').attr('disabled', true);
    };
    enableDownload = function() {
      return $('.js_download').attr('disabled', false);
    };
    onSizeChanged($('.js_size')[0].value);
    color = $('.js_color:checked').val();
    $('.js_color').each(function() {
      var val;
      val = this.value;
      return $(this).closest('.js_color_wrap').css('background-color', "rgb(" + (colors[val].join(',')) + ")");
    });
    $('.js_color').on('change', function() {
      return color = this.value;
    });
    $('.js_size').on('change', function() {
      return onSizeChanged(this.value);
    });
    $('.js_pixels').on('change', '.js_pixel', function() {
      var $el, current, index, rgb;
      $el = $(this);
      current = $el.data('current') || '';
      index = $el.data('index');
      rgb = this.checked ? colors[color] : colors['n'];
      figure[index] = rgb;
      return $el.closest('.js_pixel_wrap').css('background-color', "rgb(" + (figure[index].join(',')) + ")");
    });
    $('.js_draw').on('click', function() {
      disableDownload();
      fractal.stop();
      fractal.updateFragment(_.chunk(figure, square));
      return fractal.draw(function() {
        return enableDownload();
      });
    });
    $('.js_clear').on('click', function() {
      disableDownload();
      return clearFragment();
    });
    $('.js_stop').on('click', function() {
      disableDownload();
      return fractal.stop();
    });
    return $('.js_download').on('click', function() {
      var type;
      type = 'image/png';
      return fractal.getBlob(type, function(blob) {
        var event, file, filename, pom, url;
        filename = 'fractal.png';
        console.log(blob, filename, type);
        file = new File([blob], filename, {
          type: type
        });
        url = URL.createObjectURL(file);
        pom = document.createElement('a');
        pom.setAttribute('href', url);
        pom.setAttribute('download', filename);
        if (document.createEvent) {
          event = document.createEvent('MouseEvents');
          event.initEvent('click', true, true);
          pom.dispatchEvent(event);
        } else {
          pom.click();
        }
        return URL.revokeObjectURL(url);
      });
    });
  });

}).call(this);
